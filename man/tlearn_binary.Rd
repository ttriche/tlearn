% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tlearn_binary.R
\name{tlearn_binary}
\alias{tlearn_binary}
\title{Find the best binary value for a projection}
\usage{
tlearn_binary(
  A,
  w,
  start.values = c(0.5, 0.7, 0.9, 1.1),
  verbose = TRUE,
  fit_tol = 0.01,
  error_method = "mse",
  parallel = TRUE,
  ...
)
}
\arguments{
\item{A}{samples to project: matrix of features x samples, dense or sparse}

\item{w}{feature coefficients model: matrix of features x factors}

\item{start.values}{vector of at least four binary values which will be used to initialize a quadratic fit of loss vs. binary value (see details). These values should include an underestimate, two good guesses on either side of the optimal binary value, and an overestimate.}

\item{verbose}{show convergence values}

\item{fit_tol}{convergence tolerance given as the relative accuracy of the quadratic fit at the minima of the objective (see details). Default should satisfy.}

\item{error_method}{"mse" or "mae" for mean squared/absolute error}

\item{parallel}{parallelize error loss calculation, applies only if "A" is dense. Generally if "A" is more than 90 percent sparse, it is always faster to simply leave "A" as sparse and take advantage of the (unparallelized) sparse matrix iterator in the RcppArmadillo backend.}

\item{...}{any parameter supported by `tlearn`}
}
\value{
"h" for the projection at the best binary value
}
\description{
Finds the best zero/non-zero value pair that minimizes the loss for a projection and returns "h" at that value
}
\details{
Given a binary projection on a multinomial distribution comprised of zero and a real non-negative number, the value of that non-negative number must be optimized to minimize the loss of the projection.

The relationship between that value and the loss of the projection is perfectly second-order and polynomial.
Thus, `tlearn_binary` begins by calculating loss at four values, then fits a quadratic fit in the form `y = ax^2 + bx + c`, and finds the predicted minima at `-b/(2a)`.
`tlearn_binary` then projects the model at the predicted minima, calculates the loss of the projection, and measures the relative error of the predicted loss based on the quadratic fit against the observed loss.
The process is repeated until the relative error (stopping tolerance for convergence) falls below `tol`.
}
