% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cls.R, R/solve.R
\name{cls}
\alias{cls}
\title{Constrained least squares}
\usage{
cls(
  a,
  b,
  x = NULL,
  maxit = 50,
  tol = 1e-08,
  min = 0,
  max = 1e+10,
  values = NULL,
  L0 = ncol(b)
)

cls(
  a,
  b,
  x = NULL,
  maxit = 50,
  tol = 1e-08,
  min = 0,
  max = 1e+10,
  values = NULL,
  L0 = ncol(b)
)
}
\arguments{
\item{a}{square numeric matrix containing the coefficients of the linear system}

\item{b}{numeric vector giving the right-hand side of the linear system}

\item{x}{optional initial numeric vector for x}

\item{maxit}{maximum number of iterations for least squares sequential coordinate descent}

\item{tol}{tolerance for convergence of the least squares sequential coordinate descent solver}

\item{min}{minimum permitted value, zero for NMF}

\item{max}{maximum permitted value, default 1e10}

\item{values}{if applicable, a multinomial distribution of permitted values for "h" to be incrementally enforced, beginning with the largest value in a purely bounded solution for \code{x}}

\item{L0}{L0 truncation to be incrementally enforced for each column in b, by default the length of x (ncol(b))}
}
\value{
vector of least squares solutions

vector of least squares solutions
}
\description{
Generalizes non-negativity constraint to any range or set of range constraints, solves constrained least squares equations using fast sequential coordinate descent with parallelization in RcppArmadillo.

Generalizes non-negativity constraint to any range or set of range constraints, solves constrained least squares equations using fast sequential coordinate descent with parallelization in RcppArmadillo.
}
\details{
Solve the equation \code{a \%*\% x = b} for \code{x} where \code{b} is a vector.

If \code{b} is a matrix, \code{tlearn} will be called with default parameters. Use \code{tlearn} to take full advantage of additional regularizations, weights, etc.

This function serves as an R interface to the least squares solver at the core of the \code{tlearn} transfer learning engine. The function is unique among available R/Python methods in it's ability to impose multiple ranges and implement fast least squares solving using sequential coordinate descent.

The algorithm for sequential coordinate descent least squares was first introduced by Xihui Lin, R package \code{NNLM}. \code{tlearn} generalizes the non-negativity constraint in the original code to single- and multi-range constraints and improves speed.

Solve the equation \code{a \%*\% x = b} for \code{x} where \code{b} is a vector.

If \code{b} is a matrix, \code{tlearn} will be called with default parameters. Use \code{tlearn} to take full advantage of additional regularizations, weights, etc.

This function serves as an R interface to the least squares solver at the core of the \code{tlearn} transfer learning engine. The function is unique among available R/Python methods in it's ability to impose multiple ranges and implement fast least squares solving using sequential coordinate descent.

The algorithm for sequential coordinate descent least squares was first introduced by Xihui Lin, R package \code{NNLM}. \code{tlearn} generalizes the non-negativity constraint in the original code to single- and multi-range constraints and improves speed.
}
