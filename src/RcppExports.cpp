// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// bipartiteMatch
List bipartiteMatch(NumericMatrix costMatrix);
RcppExport SEXP _tlearn_bipartiteMatch(SEXP costMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type costMatrix(costMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(bipartiteMatch(costMatrix));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_bls
arma::vec Rcpp_bls(arma::vec x, const arma::mat& a, arma::vec& b, const unsigned int maxit, const double tol, const double min, const double max, const arma::vec fixed);
RcppExport SEXP _tlearn_Rcpp_bls(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP minSEXP, SEXP maxSEXP, SEXP fixedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const double >::type min(minSEXP);
    Rcpp::traits::input_parameter< const double >::type max(maxSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type fixed(fixedSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_bls(x, a, b, maxit, tol, min, max, fixed));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_multinomial_bls
arma::vec Rcpp_multinomial_bls(arma::vec x, const arma::mat& a, arma::vec& b, const unsigned int maxit, const double tol, const double min, const double max, const arma::vec values, arma::vec fixed);
RcppExport SEXP _tlearn_Rcpp_multinomial_bls(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP minSEXP, SEXP maxSEXP, SEXP valuesSEXP, SEXP fixedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const double >::type min(minSEXP);
    Rcpp::traits::input_parameter< const double >::type max(maxSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type fixed(fixedSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_multinomial_bls(x, a, b, maxit, tol, min, max, values, fixed));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_L0_bls
arma::vec Rcpp_L0_bls(arma::vec x, const arma::mat& a, arma::vec& b, const unsigned int maxit, const double tol, const double min, const double max, const arma::vec values, const double L0, arma::vec fixed);
RcppExport SEXP _tlearn_Rcpp_L0_bls(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP minSEXP, SEXP maxSEXP, SEXP valuesSEXP, SEXP L0SEXP, SEXP fixedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const double >::type min(minSEXP);
    Rcpp::traits::input_parameter< const double >::type max(maxSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const double >::type L0(L0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type fixed(fixedSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_L0_bls(x, a, b, maxit, tol, min, max, values, L0, fixed));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_cls
arma::vec Rcpp_cls(arma::vec x, const arma::mat& a, arma::vec& b, const unsigned int maxit, const double tol, const double min, const double max, const arma::vec values, const double L0);
RcppExport SEXP _tlearn_Rcpp_cls(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP minSEXP, SEXP maxSEXP, SEXP valuesSEXP, SEXP L0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const double >::type min(minSEXP);
    Rcpp::traits::input_parameter< const double >::type max(maxSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const double >::type L0(L0SEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_cls(x, a, b, maxit, tol, min, max, values, L0));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_Loss
double Rcpp_Loss(const arma::mat w, const arma::vec d, const arma::mat h, const arma::mat& A, const arma::mat& A_weights, const double w_L1, const double w_L2, const double w_PE, const double h_L1, const double h_L2, const double h_PE, const unsigned int loss_type, const int threads);
RcppExport SEXP _tlearn_Rcpp_Loss(SEXP wSEXP, SEXP dSEXP, SEXP hSEXP, SEXP ASEXP, SEXP A_weightsSEXP, SEXP w_L1SEXP, SEXP w_L2SEXP, SEXP w_PESEXP, SEXP h_L1SEXP, SEXP h_L2SEXP, SEXP h_PESEXP, SEXP loss_typeSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type h(hSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A_weights(A_weightsSEXP);
    Rcpp::traits::input_parameter< const double >::type w_L1(w_L1SEXP);
    Rcpp::traits::input_parameter< const double >::type w_L2(w_L2SEXP);
    Rcpp::traits::input_parameter< const double >::type w_PE(w_PESEXP);
    Rcpp::traits::input_parameter< const double >::type h_L1(h_L1SEXP);
    Rcpp::traits::input_parameter< const double >::type h_L2(h_L2SEXP);
    Rcpp::traits::input_parameter< const double >::type h_PE(h_PESEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type loss_type(loss_typeSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_Loss(w, d, h, A, A_weights, w_L1, w_L2, w_PE, h_L1, h_L2, h_PE, loss_type, threads));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_SpLoss
double Rcpp_SpLoss(const arma::mat w, const arma::vec d, const arma::mat h, const arma::SpMat<double>& A, const arma::SpMat<double> A_weights, const double w_L1, const double w_L2, const double w_PE, const double h_L1, const double h_L2, const double h_PE, const unsigned int loss_type);
RcppExport SEXP _tlearn_Rcpp_SpLoss(SEXP wSEXP, SEXP dSEXP, SEXP hSEXP, SEXP ASEXP, SEXP A_weightsSEXP, SEXP w_L1SEXP, SEXP w_L2SEXP, SEXP w_PESEXP, SEXP h_L1SEXP, SEXP h_L2SEXP, SEXP h_PESEXP, SEXP loss_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type h(hSEXP);
    Rcpp::traits::input_parameter< const arma::SpMat<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::SpMat<double> >::type A_weights(A_weightsSEXP);
    Rcpp::traits::input_parameter< const double >::type w_L1(w_L1SEXP);
    Rcpp::traits::input_parameter< const double >::type w_L2(w_L2SEXP);
    Rcpp::traits::input_parameter< const double >::type w_PE(w_PESEXP);
    Rcpp::traits::input_parameter< const double >::type h_L1(h_L1SEXP);
    Rcpp::traits::input_parameter< const double >::type h_L2(h_L2SEXP);
    Rcpp::traits::input_parameter< const double >::type h_PE(h_PESEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type loss_type(loss_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_SpLoss(w, d, h, A, A_weights, w_L1, w_L2, w_PE, h_L1, h_L2, h_PE, loss_type));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_LossSample
arma::vec Rcpp_LossSample(const arma::mat w, const arma::vec d, const arma::mat h, const arma::mat& A, const unsigned int loss_type, const int threads);
RcppExport SEXP _tlearn_Rcpp_LossSample(SEXP wSEXP, SEXP dSEXP, SEXP hSEXP, SEXP ASEXP, SEXP loss_typeSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type h(hSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type loss_type(loss_typeSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_LossSample(w, d, h, A, loss_type, threads));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_SpLossSample
arma::vec Rcpp_SpLossSample(const arma::mat w, const arma::vec d, const arma::mat h, const arma::SpMat<double>& A, const unsigned int loss_type, const int threads);
RcppExport SEXP _tlearn_Rcpp_SpLossSample(SEXP wSEXP, SEXP dSEXP, SEXP hSEXP, SEXP ASEXP, SEXP loss_typeSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type h(hSEXP);
    Rcpp::traits::input_parameter< const arma::SpMat<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type loss_type(loss_typeSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_SpLossSample(w, d, h, A, loss_type, threads));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_Solve
arma::mat Rcpp_Solve(arma::mat& h, const arma::mat& wt, const arma::mat& A, const int threads, const int L0, const double L1, const double L2, const double PE, const arma::vec values, const int maxit, const double tol, const double min, const double max);
RcppExport SEXP _tlearn_Rcpp_Solve(SEXP hSEXP, SEXP wtSEXP, SEXP ASEXP, SEXP threadsSEXP, SEXP L0SEXP, SEXP L1SEXP, SEXP L2SEXP, SEXP PESEXP, SEXP valuesSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< const int >::type L0(L0SEXP);
    Rcpp::traits::input_parameter< const double >::type L1(L1SEXP);
    Rcpp::traits::input_parameter< const double >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< const double >::type PE(PESEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const double >::type min(minSEXP);
    Rcpp::traits::input_parameter< const double >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_Solve(h, wt, A, threads, L0, L1, L2, PE, values, maxit, tol, min, max));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_SpSolve
arma::mat Rcpp_SpSolve(arma::mat& h, const arma::mat& wt, const arma::SpMat<double>& A, const int threads, const int L0, const double L1, const double L2, const double PE, const arma::vec values, const int maxit, const double tol, const double min, const double max);
RcppExport SEXP _tlearn_Rcpp_SpSolve(SEXP hSEXP, SEXP wtSEXP, SEXP ASEXP, SEXP threadsSEXP, SEXP L0SEXP, SEXP L1SEXP, SEXP L2SEXP, SEXP PESEXP, SEXP valuesSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< const arma::SpMat<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< const int >::type L0(L0SEXP);
    Rcpp::traits::input_parameter< const double >::type L1(L1SEXP);
    Rcpp::traits::input_parameter< const double >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< const double >::type PE(PESEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const double >::type min(minSEXP);
    Rcpp::traits::input_parameter< const double >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_SpSolve(h, wt, A, threads, L0, L1, L2, PE, values, maxit, tol, min, max));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_WSolve
arma::mat Rcpp_WSolve(arma::mat& h, const arma::mat& wt, const arma::mat& A, const arma::mat& A_weights, const int threads, const int L0, const double L1, const double L2, const double PE, const arma::vec values, const int maxit, const double tol, const double min, const double max);
RcppExport SEXP _tlearn_Rcpp_WSolve(SEXP hSEXP, SEXP wtSEXP, SEXP ASEXP, SEXP A_weightsSEXP, SEXP threadsSEXP, SEXP L0SEXP, SEXP L1SEXP, SEXP L2SEXP, SEXP PESEXP, SEXP valuesSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A_weights(A_weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< const int >::type L0(L0SEXP);
    Rcpp::traits::input_parameter< const double >::type L1(L1SEXP);
    Rcpp::traits::input_parameter< const double >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< const double >::type PE(PESEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const double >::type min(minSEXP);
    Rcpp::traits::input_parameter< const double >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_WSolve(h, wt, A, A_weights, threads, L0, L1, L2, PE, values, maxit, tol, min, max));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_SpWSolve
arma::mat Rcpp_SpWSolve(arma::mat& h, const arma::mat& wt, const arma::SpMat<double>& A, const arma::SpMat<double>& A_weights, const int threads, const int L0, const double L1, const double L2, const double PE, const arma::vec values, const int maxit, const double tol, const double min, const double max);
RcppExport SEXP _tlearn_Rcpp_SpWSolve(SEXP hSEXP, SEXP wtSEXP, SEXP ASEXP, SEXP A_weightsSEXP, SEXP threadsSEXP, SEXP L0SEXP, SEXP L1SEXP, SEXP L2SEXP, SEXP PESEXP, SEXP valuesSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< const arma::SpMat<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::SpMat<double>& >::type A_weights(A_weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< const int >::type L0(L0SEXP);
    Rcpp::traits::input_parameter< const double >::type L1(L1SEXP);
    Rcpp::traits::input_parameter< const double >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< const double >::type PE(PESEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const double >::type min(minSEXP);
    Rcpp::traits::input_parameter< const double >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_SpWSolve(h, wt, A, A_weights, threads, L0, L1, L2, PE, values, maxit, tol, min, max));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tlearn_bipartiteMatch", (DL_FUNC) &_tlearn_bipartiteMatch, 1},
    {"_tlearn_Rcpp_bls", (DL_FUNC) &_tlearn_Rcpp_bls, 8},
    {"_tlearn_Rcpp_multinomial_bls", (DL_FUNC) &_tlearn_Rcpp_multinomial_bls, 9},
    {"_tlearn_Rcpp_L0_bls", (DL_FUNC) &_tlearn_Rcpp_L0_bls, 10},
    {"_tlearn_Rcpp_cls", (DL_FUNC) &_tlearn_Rcpp_cls, 9},
    {"_tlearn_Rcpp_Loss", (DL_FUNC) &_tlearn_Rcpp_Loss, 13},
    {"_tlearn_Rcpp_SpLoss", (DL_FUNC) &_tlearn_Rcpp_SpLoss, 12},
    {"_tlearn_Rcpp_LossSample", (DL_FUNC) &_tlearn_Rcpp_LossSample, 6},
    {"_tlearn_Rcpp_SpLossSample", (DL_FUNC) &_tlearn_Rcpp_SpLossSample, 6},
    {"_tlearn_Rcpp_Solve", (DL_FUNC) &_tlearn_Rcpp_Solve, 13},
    {"_tlearn_Rcpp_SpSolve", (DL_FUNC) &_tlearn_Rcpp_SpSolve, 13},
    {"_tlearn_Rcpp_WSolve", (DL_FUNC) &_tlearn_Rcpp_WSolve, 14},
    {"_tlearn_Rcpp_SpWSolve", (DL_FUNC) &_tlearn_Rcpp_SpWSolve, 14},
    {NULL, NULL, 0}
};

RcppExport void R_init_tlearn(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
